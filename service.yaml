# Different Types:
#   clusterIP - if web pods need to access database pods, give database pods and internal cluster IP
#   nodePort - assigns a random high-number port on all nodes for pods / used with external load-balancer like F5
#   loadbalancer - In AWS links clusterIP and nodePort and dynamically updates pod information
#
# Create command-line Service:
#   kubectl expose deploy/nginx --type=NodePort
#   kubectl get service   <-- nginx NodePort service on high-number port / access port with web browser
#   kubectl delete service/nginx
#
#   kubectl create service nodeport nginx --node-port=31337 --tcp=80:80
#   kubectl get service
#   kubectl delete service/nginx
#
# Create using this yaml file:
#   kubectl apply -f service.yaml
#   kubectl get service   <-- Internal only cluster IP using port 80
#   <use Kubernetes Ingress to handle external-to-internal traffic>

apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: nginx
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selection:
    app: nginx
  sessionAffinity: None
  type: ClusterIP
